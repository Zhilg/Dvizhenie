let currentJobId = null;
let checkInterval = null;
let availableModels = [];
let jobHistory = [];

async function loadModels() {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...', 'processing');
        const response = await fetch('/api/models');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π');
        }
        
        availableModels = await response.json();
        updateModelSelect();
        showStatus('‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        
    } catch (error) {
        console.error('Error loading models:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: ' + error.message, 'error');
    }
}

function updateModelSelect() {
    const select = document.getElementById('modelSelect');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...</option>';
    
    availableModels.forEach(model => {
        const option = document.createElement('option');
        option.value = model.model_id;
        option.textContent = model.model_name || model.model_id;
        option.dataset.dimension = model.dimension;
        select.appendChild(option);
    });
}

document.getElementById('modelSelect').addEventListener('change', function() {
    const selectedModelId = this.value;
    const modelInfo = document.getElementById('modelInfo');
    const modelDetails = document.getElementById('modelDetails');
    
    if (!selectedModelId) {
        modelInfo.style.display = 'none';
        return;
    }
    
    const model = availableModels.find(m => m.model_id === selectedModelId);
    if (model) {
        modelDetails.innerHTML = `
            <p><strong>ID:</strong> ${model.model_id}</p>
            <p><strong>–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:</strong> ${model.dimension}D</p>
            ${model.model_name ? `<p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${model.model_name}</p>` : ''}
        `;
        modelInfo.style.display = 'block';
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
async function loadJobHistory() {
try {
    showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...', 'processing');
    
    const response = await fetch('/api/clusterization/history');
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    const data = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(data)) {
        console.warn('Expected array but got:', data);
        jobHistory = [];
    } else {
        jobHistory = data;
    }
    
    displayJobHistory();
    showStatus('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
    
} catch (error) {
    console.error('Error loading job history:', error);
    showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ' + error.message, 'error');
    jobHistory = [];
    displayJobHistory();
}
}

function displayJobHistory() {
const historyDiv = document.getElementById('jobHistory');

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
if (!Array.isArray(jobHistory) || jobHistory.length === 0) {
    historyDiv.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</p>';
    return;
}

try {
    historyDiv.innerHTML = jobHistory.map(job => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ job —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
        if (typeof job !== 'object' || job === null) {
            return '<div class="job-item">‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞–Ω–∏—è</div>';
        }
        
        const jobId = job.job_id || 'Unknown ID';
        const status = job.status || 'unknown';
        const modelId = job.model_id || 'N/A';
        const createdAt = job.created_at ? new Date(job.created_at).toLocaleString() : 'N/A';
        const estimatedTime = job.estimated_time_min ? `~${job.estimated_time_min} –º–∏–Ω` : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        return `
            <div class="job-item" data-job-id="${jobId}">
                <div class="job-header">
                    <strong>üìä ${jobId.substring(0, 8)}...</strong>
                    <span class="job-status ${status}">${getStatusIcon(status)} ${status}</span>
                </div>
                <div class="job-details">
                    <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${modelId}</p>
                    <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${createdAt}</p>
                    <p><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> ${estimatedTime}</p>
                    ${job.corpus_path ? `<p><strong>–ö–æ—Ä–ø—É—Å:</strong> ${job.corpus_path}</p>` : ''}
                </div>
                <div class="job-actions">
                    <button class="btn btn-small btn-primary" onclick="useClusteringJob('${jobId}', '${modelId}')">
                        ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    </button>
                    <button class="btn btn-small" onclick="checkJobStatus('${jobId}')">
                        üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                    </button>
                </div>
            </div>
        `;
    }).join('');
} catch (error) {
    console.error('Error displaying job history:', error);
    historyDiv.innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏</p>';
}
}

function getStatusIcon(status) {
const icons = {
    'pending': '‚è≥',
    'processing': 'üîÑ',
    'completed': '‚úÖ',
    'error': '‚ùå',
    'failed': '‚ùå'
};
return icons[status] || 'üìã';
}

function useClusteringJob(jobId, modelId) {
document.getElementById('clusteringJobId').value = jobId;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
const modelSelect = document.getElementById('modelSelect');
if (modelId && Array.from(modelSelect.options).some(opt => opt.value === modelId)) {
    modelSelect.value = modelId;
}

showStatus(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: ${jobId}`, 'success');

// –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
// document.getElementById('classificationForm').scrollIntoView({ 
//     behavior: 'smooth' 
// });
}

async function checkJobStatus(jobId) {
try {
showStatus('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...', 'processing');

const response = await fetch(`/api/jobs/${jobId}`);
if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');

const status = await response.json();

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
const jobIndex = jobHistory.findIndex(job => job.job_id === jobId);
if (jobIndex !== -1) {
    jobHistory[jobIndex].status = status.status;
    displayJobHistory();
}

showStatus(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è: ${status.status}`, 'success');

} catch (error) {
console.error('Error checking job status:', error);
showStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + error.message, 'error');
}
}


async function viewJobDetails(jobId) {
try {
    const response = await fetch(`/api/jobs/${jobId}/details`);
    const jobDetails = await response.json();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    alert(JSON.stringify(jobDetails, null, 2));
    
} catch (error) {
    console.error('Error fetching job details:', error);
    showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è', 'error');
}
}

function selectFolder() {
    document.getElementById('fileInput').click();
}

document.getElementById('fileInput').addEventListener('change', function(e) {
    const files = e.target.files;
    if (files.length === 0) return;

    document.getElementById('selectedFolder').textContent = 
        `–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`;
});

async function startClassification() {
    const modelSelect = document.getElementById('modelSelect');
    const modelId = modelSelect.value;
    const clusteringJobId = document.getElementById('clusteringJobId').value;
    
    if (!modelId) {
        showStatus('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error');
        return;
    }
    
    if (!clusteringJobId) {
        showStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
        return;
    }

    const files = document.getElementById('fileInput').files;
    if (files.length === 0) {
        showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏', 'error');
        return;
    }

    clearStatus();
    document.getElementById('loading').style.display = 'block';
    document.getElementById('startBtn').disabled = true;
    
    try {
        const formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append('files', files[i]);
        }

        const modelId = document.getElementById('modelSelect').value;
        const ttlHours = document.getElementById('ttlHours').value;

        const response = await fetch('/api/classification', {
            method: 'POST',
            headers: {
                'x-model-id': modelId,
                'x-clustering-job-id': clusteringJobId,
                'x-ttl-hours': ttlHours
            },
            body: formData
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const result = await response.json();
        currentJobId = result.job_id;
        
        showStatus(`–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. Job ID: ${currentJobId}`, 'processing');
        startStatusChecking();
        
    } catch (error) {
        console.error('Error:', error);
        showStatus('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        document.getElementById('startBtn').disabled = false;
    }
}

function startStatusChecking() {
    if (checkInterval) clearInterval(checkInterval);
    
    checkInterval = setInterval(async () => {
        try {
            const response = await fetch(`/api/jobs/${currentJobId}`);
            const status = await response.json();
            
            if (status.status === 'processing') {
                updateProgress(status);
            } else if (status.status === 'completed') {
                clearInterval(checkInterval);
                await fetchResults(status.result_url);
            } else if (status.status === 'error') {
                clearInterval(checkInterval);
                showStatus('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' + status.message, 'error');
            }
        } catch (error) {
            console.error('Status check error:', error);
        }
    }, 2000);
}

function updateProgress(status) {
    const progress = status.progress || 0;
    document.getElementById('progressFill').style.width = progress + '%';
    
    let details = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`;
    if (status.details) {
        if (status.details.files_processed) {
            details += ` | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${status.details.files_processed}`;
        }
        if (status.details.bytes_processed) {
            details += ` | –ë–∞–π—Ç: ${formatBytes(status.details.bytes_processed)}`;
        }
    }
    document.getElementById('progressDetails').textContent = details;
    
    showStatus(`–û–±—Ä–∞–±–æ—Ç–∫–∞: ${progress}%`, 'processing');
}

async function fetchResults(resultUrl) {
    try {
                const response = await fetch("/api/result", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "x-result-url": resultUrl
                },
            });
        if (!response.ok) throw new Error('Failed to fetch results');
        
        const results = await response.json();
        displayResults(results);
        showStatus('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('Error fetching results:', error);
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + error.message, 'error');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

function displayResults(results) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = '';
    
    if (!results.correspondence_table || !results.correspondence_table.files) {
        tableBody.innerHTML = '<tr><td colspan="12">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }
    
    const clusterNames = results.correspondence_table.cluster_names || {};
    
    results.correspondence_table.files.forEach(file => {
        const devClasses = file.d || [];
        // –î–ª—è –æ–±–æ–ª–æ—á–∫–∏ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
        const shellClasses = calculateShellClasses(devClasses, clusterNames);
        
        const row1 = document.createElement('tr');
        const row2 = document.createElement('tr');
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - developer classes
        row1.innerHTML = `
            <td rowspan="2" class="file-info">${file.f}</td>
        `;
        
        devClasses.forEach(([classId, similarity]) => {
            row1.innerHTML += `<td>${clusterNames[classId] || classId}<br>${similarity.toFixed(3)}</td>`;
        });
        
        for (let i = devClasses.length; i < 5; i++) {
            row1.innerHTML += '<td>-</td>';
        }
        
        row1.innerHTML += `<td rowspan="2" id="matches-${file.f}"></td>`;
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - shell classes
        shellClasses.forEach((shellClass, index) => {
            const isMatch = devClasses.some(([devId]) => devId === shellClass.classId);
            const cellClass = isMatch ? 'match' : '';
            row2.innerHTML += `<td class="${cellClass}">${shellClass.name}<br>${shellClass.similarity.toFixed(3)}</td>`;
        });
        
        for (let i = shellClasses.length; i < 5; i++) {
            row2.innerHTML += '<td>-</td>';
        }
        
        tableBody.appendChild(row1);
        tableBody.appendChild(row2);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
        const matches = findMatches(devClasses, shellClasses, clusterNames);
        document.getElementById(`matches-${file.f}`).innerHTML = matches.join('<br>');
    });
    
    document.getElementById('results').style.display = 'block';
}

function calculateShellClasses(devClasses, clusterNames) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ –∂–µ –∫–ª–∞—Å—Å—ã —Å –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ similarity
    return devClasses.map(([classId, similarity]) => ({
        classId,
        name: clusterNames[classId] || classId,
        similarity: Math.max(0.1, similarity + (Math.random() - 0.5) * 0.1)
    }));
}

function findMatches(devClasses, shellClasses, clusterNames) {
    const matches = [];
    devClasses.forEach(([devId, devSim], index) => {
        const shellClass = shellClasses.find(s => s.classId === devId);
        if (shellClass) {
            matches.push(`${clusterNames[devId] || devId}: dev=${devSim.toFixed(3)}, shell=${shellClass.similarity.toFixed(3)}`);
        }
    });
    return matches;
}

function showStatus(message, type) {
    const statusDiv = document.getElementById('status');
    statusDiv.innerHTML = `<div class="status status-${type}">${message}</div>`;
}

function clearStatus() {
    document.getElementById('status').innerHTML = '';
}

function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

document.addEventListener('DOMContentLoaded', () => {
    loadModels();
    loadJobHistory('all');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => loadJobHistory('all'), 30000);
});
