let currentJobId = null;
let checkInterval = null;
let availableModels = [];
let jobHistory = [];
let grntiCodesData = {}; // –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏ –∫–æ–¥–æ–≤ –ì–†–ù–¢–ò
let expertOpinions = {}; // –ú–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
let currentResults = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
async function loadModels() {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...', 'processing');
        const response = await fetch('/api/models');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π');
        }
        
        availableModels = await response.json();
        updateModelSelect();
        showStatus('‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        
    } catch (error) {
        console.error('Error loading models:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: ' + error.message, 'error');
    }
}

function updateModelSelect() {
    const select = document.getElementById('modelSelect');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...</option>';
    
    availableModels.forEach(model => {
        const option = document.createElement('option');
        option.value = model.model_id;
        option.textContent = model.model_name || model.model_id;
        option.dataset.dimension = model.dimension;
        select.appendChild(option);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
async function loadClusteringHistory() {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...', 'processing');
        const response = await fetch('/api/clusterization/history');
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        
        const history = await response.json();
        displayClusteringHistory(history);
        showStatus('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
        
    } catch (error) {
        console.error('Error loading clustering history:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ' + error.message, 'error');
    }
}

function displayClusteringHistory(history) {
    const container = document.getElementById('clusteringHistory');
    if (!history || history.length === 0) {
        container.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</p>';
        return;
    }

    container.innerHTML = history.map(job => `
        <div class="job-item">
            <div class="job-header">
                <strong>üìä ${job.job_id?.substring(0, 8)}...</strong>
                <span class="job-status ${job.status}">${getStatusIcon(job.status)} ${job.status}</span>
            </div>
            <div class="job-details">
                <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${job.model_id || 'N/A'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(job.created_at).toLocaleString()}</p>
                ${job.corpus_path ? `<p><strong>–ö–æ—Ä–ø—É—Å:</strong> ${job.corpus_path}</p>` : ''}
            </div>
            <button class="btn btn-small" onclick="useClusteringJob('${job.job_id}', '${job.model_id}')">
                ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            </button>
        </div>
    `).join('');
}

function useClusteringJob(jobId, modelId) {
    document.getElementById('clusteringJobId').value = jobId;
    if (modelId) {
        document.getElementById('modelSelect').value = modelId;
    }
    showStatus(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: ${jobId}`, 'success');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function startGrntiClassification() {
    const modelId = document.getElementById('modelSelect').value;
    const clusteringJobId = document.getElementById('clusteringJobId').value;
    // const ttlHours = document.getElementById('ttlHours').value;
    const files = document.getElementById('fileInput').files;

    if (!modelId || !clusteringJobId || files.length === 0) {
        showStatus('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }

    try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('startBtn').disabled = true;
        showStatus('üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ì–†–ù–¢–ò...', 'processing');

        const formData = new FormData();
        Array.from(files).forEach(file => formData.append('files', file));

        const response = await fetch('/api/classification/grnti', {
            method: 'POST',
            headers: {
                'x-model-id': modelId,
                'x-clustering-job-id': clusteringJobId,
                'x-ttl-hours': 0
            },
            body: formData
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const result = await response.json();
        currentJobId = result.job_id;
        
        showStatus(`‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. Job ID: ${currentJobId}`, 'success');
        startStatusChecking();
        
    } catch (error) {
        console.error('Classification error:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        document.getElementById('startBtn').disabled = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
function startStatusChecking() {
    if (checkInterval) clearInterval(checkInterval);
    
    checkInterval = setInterval(async () => {
        try {
            const response = await fetch(`/api/jobs/${currentJobId}`);
            if (!response.ok) throw new Error('Status check failed');
            
            const status = await response.json();
            
            if (status.status === 'processing') {
                updateProgress(status);
            } else if (status.status === 'completed') {
                clearInterval(checkInterval);
                await fetchResults(status.result_url);
            } else if (status.status === 'error') {
                clearInterval(checkInterval);
                showStatus('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'error');
            }
        } catch (error) {
            console.error('Status check error:', error);
        }
    }, 2000);
}

function updateProgress(status) {
    const progress = status.progress || 0;
    document.getElementById('progressFill').style.width = progress + '%';
    
    let details = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`;
    if (status.details) {
        details += ` | –§–∞–π–ª–æ–≤: ${status.details.files_processed || 0}`;
        details += ` | –î–∞–Ω–Ω—ã—Ö: ${formatBytes(status.details.bytes_processed || 0)}`;
    }
    document.getElementById('progressDetails').textContent = details;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function fetchResults(resultUrl) {
    try {
                const response = await fetch("/api/result", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "x-result-url": resultUrl
                },
            });
        if (!response.ok) throw new Error('Failed to fetch results');
        
        const results = await response.json();
        displayResults(results);
        showStatus('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('Error fetching results:', error);
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + error.message, 'error');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

function displayResults(results) {
    if (!results.classification_results) {
        showStatus('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'error');
        return;
    }

    currentResults = results; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const summary = results.classification_results.summary;
    document.getElementById('summaryStats').innerHTML = `
        <div class="stat-item">
            <div class="stat-value">${(summary.agreement_with_expert * 100).toFixed(1)}%</div>
            <div class="stat-label">–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${(summary.accuracy_top_3 * 100).toFixed(1)}%</div>
            <div class="stat-label">–¢–æ—á–Ω–æ—Å—Ç—å (—Ç–æ–ø-3)</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${summary.total_files}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</div>
        </div>
    `;

    // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const tbody = document.getElementById('resultsBody');
    tbody.innerHTML = '';
    
    results.files.forEach(file => {
        const isCorrect = file.expert_grnti_code === file.predicted_grnti_code;
        const rowClass = isCorrect ? 'correct' : 'incorrect';
        
        const row = document.createElement('tr');
        row.className = rowClass;
        row.dataset.file = file.file;
        
        row.innerHTML = `
            <td>${file.file}</td>
            <td></td> <!-- –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ -->
            <td></td> <!-- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã -->
            <td>
                <input type="number" class="expert-input" 
                       value="${(file.similarity * 100).toFixed(1)}" 
                       min="0" max="100" step="1" 
                       onchange="saveExpertPercentage('${file.file}', this.value)">
                %
            </td>
            <td></td> <!-- –¢–æ–ø-5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π -->
            <td>${isCorrect ? '‚úÖ' : '‚ùå'}</td>
            <td>
                <button class="btn btn-small" onclick="showFileDetails('${file.file}')">
                    üìã –î–µ—Ç–∞–ª–∏
                </button>
            </td>
        `;
        
        // –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
        const expertCell = row.cells[1];
        const expertContent = createGrntiCell(
            file.expert_grnti_code, 
            file.expert_grnti_name, 
            true,
            'expert'
        );
        expertCell.appendChild(expertContent);
        
        // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
        const systemCell = row.cells[2];
        const systemContent = createGrntiCell(
            file.predicted_grnti_code, 
            file.predicted_grnti_name, 
            false,
            'system'
        );
        systemCell.appendChild(systemContent);
        
        // –¢–æ–ø-5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        const top5Cell = row.cells[4];
        const top5Content = createTop5PredictionsCell(file.top_5_predictions);
        top5Cell.appendChild(top5Content);
        
        tbody.appendChild(row);
    });

    document.getElementById('results').style.display = 'block';
}

function showFileDetails(fileName) {
    const fileData = currentResults.files.find(f => f.file === fileName);
    if (!fileData) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 800px;">
            <span class="close" onclick="this.parentElement.parentElement.style.display='none'">&times;</span>
            <h3>üìÑ –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞: ${fileName}</h3>
            
            <div class="file-details-grid">
                <div class="detail-item">
                    <h4>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
                    ${createGrntiCell(fileData.expert_grnti_code, fileData.expert_grnti_name, false, 'expert').outerHTML}
                </div>
                
                <div class="detail-item">
                    <h4>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h4>
                    ${createGrntiCell(fileData.predicted_grnti_code, fileData.predicted_grnti_name, false, 'system').outerHTML}
                    <p><strong>–°—Ö–æ–¥—Å—Ç–≤–æ:</strong> ${(fileData.similarity * 100).toFixed(1)}%</p>
                </div>
            </div>
            
            <h4>–¢–æ–ø-5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã:</h4>
            <div class="predictions-list">
                ${fileData.top_5_predictions.map((pred, index) => `
                    <div class="prediction-item">
                        <span class="prediction-rank">${index + 1}.</span>
                        ${createGrntiCell(pred[0], '', false, 'system').outerHTML}
                        <span class="prediction-confidence">${(pred[1] * 100).toFixed(1)}%</span>
                    </div>
                `).join('')}
            </div>
            
            ${currentResults.grnti_branch ? `
                <div class="branch-info">
                    <h4>–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π:</h4>
                    <p>${currentResults.grnti_branch}</p>
                </div>
            ` : ''}
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function selectFolder() {
    document.getElementById('fileInput').click();
}

document.getElementById('fileInput').addEventListener('change', function(e) {
    const files = e.target.files;
    document.getElementById('selectedFolder').textContent = 
        `üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`;
    document.getElementById('startBtn').disabled = files.length === 0;
});

function showStatus(message, type) {
    const container = document.getElementById('status');
    container.innerHTML = `<div class="status status-${type}">${message}</div>`;
}

function getStatusIcon(status) {
    const icons = {
        'processing': 'üîÑ',
        'completed': '‚úÖ',
        'error': '‚ùå'
    };
    return icons[status] || 'üìã';
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
async function loadJobHistory(type = 'all') {
    try {
        const url = type === 'all' ? '/api/jobs/history' : `/api/jobs/history?type=${type}`;
        const response = await fetch(url);
        
        if (response.ok) {
            jobHistory = await response.json();
            displayJobHistory();
        }
    } catch (error) {
        console.error('Error loading job history:', error);
    }
}

function displayJobHistory() {
    const container = document.getElementById('jobHistory');
    if (!jobHistory.length) {
        container.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π</p>';
        return;
    }

    container.innerHTML = jobHistory.map(job => `
        <div class="job-item">
            <div class="job-header">
                <strong>${job.type === 'grnti_classification' ? 'üè∑Ô∏è' : 'üìä'} ${job.job_id?.substring(0, 8)}...</strong>
                <span class="job-status ${job.status}">${getStatusIcon(job.status)} ${job.status}</span>
            </div>
            <div class="job-details">
                <p><strong>–¢–∏–ø:</strong> ${job.type}</p>
                <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${job.model_id || 'N/A'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(job.created_at).toLocaleString()}</p>
            </div>
        </div>
    `).join('');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è


async function loadGrntiCodes() {
    try {
        const response = await fetch('/api/grnti-codes');
        if (response.ok) {
            const data = await response.json();
            window.grntiCodesData = data; // –î–µ–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
            showStatus('‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –ì–†–ù–¢–ò –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
        } else {
            showStatus('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∫–æ–¥–æ–≤ –ì–†–ù–¢–ò', 'warning');
        }
    } catch (error) {
        console.error('Error loading GRNTI codes:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–æ–¥–æ–≤ –ì–†–ù–¢–ò', 'error');
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–¥–µ –ì–†–ù–¢–ò
function showGrntiInfo(code, source = 'system') {
    const modal = document.getElementById('grntiModal');
    const codeInfo = window.grntiCodesData?.[code] || {
        name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ì–†–ù–¢–ò',
        branch: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å'
    };

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    const grntiCodeInfo = document.getElementById('grntiCodeInfo');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    grntiCodeInfo.innerHTML = `
        <p><strong>–ö–æ–¥:</strong> <span id="modalCode">${code}</span></p>
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> <span id="modalName">${codeInfo.name}</span></p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> <span id="modalDescription">${codeInfo.description}</span></p>
        <p><strong>–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π:</strong> <span id="modalBranch">${codeInfo.branch || '–û–±—â–∞—è —Ä—É–±—Ä–∏–∫–∞'}</span></p>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    const sourceInfo = document.createElement('p');
    sourceInfo.innerHTML = `<strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${source === 'system' ? '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã' : '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞'}`;
    grntiCodeInfo.appendChild(sourceInfo);
    
    modal.style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeGrntiModal() {
    document.getElementById('grntiModal').style.display = 'none';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º –ì–†–ù–¢–ò –∏ –∏–∫–æ–Ω–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function createGrntiCell(code, name, isEditable = false, source = 'system') {
    const container = document.createElement('div');
    container.style.display = 'flex';
    container.style.alignItems = 'center';
    container.style.justifyContent = 'space-between';
    
    const textSpan = document.createElement('span');
    textSpan.textContent = `${code} - ${name}`;
    
    const infoIcon = document.createElement('span');
    infoIcon.textContent = '‚ÑπÔ∏è';
    infoIcon.className = 'info-icon';
    infoIcon.title = '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ì–†–ù–¢–ò';
    infoIcon.onclick = (e) => {
        e.stopPropagation();
        showGrntiInfo(code, source);
    };
    
    container.appendChild(textSpan);
    container.appendChild(infoIcon);
    
    if (isEditable) {
        container.className = 'editable-cell';
        container.onclick = (e) => {
            if (e.target !== infoIcon) {
                editGrntiCell(container, code, name, source);
            }
        };
    }
    
    return container;
}

function createTop5PredictionsCell(predictions) {
    const container = document.createElement('div');
    
    predictions.forEach((pred, index) => {
        const [code, confidence] = pred;
        const predictionItem = document.createElement('div');
        predictionItem.style.display = 'flex';
        predictionItem.style.justifyContent = 'space-between';
        predictionItem.style.alignItems = 'center';
        predictionItem.style.marginBottom = '4px';
        
        const codeSpan = document.createElement('span');
        codeSpan.textContent = `${code}`;
        
        const confidenceSpan = document.createElement('span');
        confidenceSpan.textContent = `${(confidence * 100).toFixed(1)}%`;
        confidenceSpan.style.marginLeft = '10px';
        
        const infoIcon = document.createElement('span');
        infoIcon.textContent = '‚ÑπÔ∏è';
        infoIcon.className = 'info-icon';
        infoIcon.title = '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ì–†–ù–¢–ò';
        infoIcon.onclick = (e) => {
            e.stopPropagation();
            showGrntiInfo(code, 'system');
        };
        
        predictionItem.appendChild(codeSpan);
        predictionItem.appendChild(confidenceSpan);
        predictionItem.appendChild(infoIcon);
        
        container.appendChild(predictionItem);
    });
    
    return container;
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º –ì–†–ù–¢–ò
function editGrntiCell(cellElement, currentCode, currentName) {
    const input = document.createElement('input');
    input.type = 'text';
    input.value = `${currentCode} - ${currentName}`;
    input.className = 'editable-input';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const originalContent = cellElement.innerHTML;
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ input
    cellElement.innerHTML = '';
    cellElement.appendChild(input);
    input.focus();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveEdit = () => {
        const newValue = input.value.trim();
        if (newValue) {
            // –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–∫–æ–¥ - –Ω–∞–∑–≤–∞–Ω–∏–µ")
            const parts = newValue.split(' - ');
            const newCode = parts[0];
            const newName = parts.slice(1).join(' - ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
            cellElement.innerHTML = '';
            const newContent = createGrntiCell(newCode, newName, true);
            cellElement.appendChild(newContent);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞
            saveExpertOpinion(cellElement.closest('tr').dataset.file, newCode, newName);
        } else {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            cellElement.innerHTML = originalContent;
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            saveEdit();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('blur', saveEdit);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è input –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
function createExpertInput(fileName, currentValue) {
    const container = document.createElement('div');
    
    const input = document.createElement('input');
    input.type = 'number';
    input.min = 0;
    input.max = 100;
    input.step = 1;
    input.value = currentValue || '';
    input.className = 'expert-input';
    input.placeholder = '0-100%';
    
    input.addEventListener('change', (e) => {
        const value = parseInt(e.target.value);
        if (value >= 0 && value <= 100) {
            saveExpertPercentage(fileName, value);
        } else {
            e.target.value = '';
        }
    });
    
    container.appendChild(input);
    return container;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –∫–æ–¥–µ –ì–†–ù–¢–ò
function saveExpertOpinion(fileName, code, name) {
    if (!expertOpinions[fileName]) {
        expertOpinions[fileName] = {};
    }
    expertOpinions[fileName].expert_code = code;
    expertOpinions[fileName].expert_name = name;
    
    console.log('Expert opinion saved:', fileName, code, name);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞
function saveExpertPercentage(fileName, percentage) {
    if (!expertOpinions[fileName]) {
        expertOpinions[fileName] = {};
    }
    expertOpinions[fileName].expert_percentage = percentage;
    
    console.log('Expert percentage saved:', fileName, percentage);
}

async function saveAllExpertOpinions() {
    try {
        const response = await fetch('/api/save-expert-opinions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                job_id: currentJobId,
                expert_opinions: expertOpinions,
                original_results: currentResults
            })
        });
        
        if (response.ok) {
            showStatus('‚úÖ –ú–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } else {
            throw new Error('Failed to save expert opinions');
        }
    } catch (error) {
        console.error('Error saving expert opinions:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–Ω–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞', 'error');
    }
}

// –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª actions
document.querySelector('.actions').innerHTML += `
    <button class="btn btn-success" onclick="saveAllExpertOpinions()">
        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞
    </button>
`;



window.addEventListener('click', (e) => {
    const modal = document.getElementById('grntiModal');
    if (e.target === modal) {
        closeGrntiModal();
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤ –ì–†–ù–¢–ò
document.addEventListener('DOMContentLoaded', () => {
    loadModels();
    loadClusteringHistory();
    loadJobHistory('all');
    loadGrntiCodes();
});