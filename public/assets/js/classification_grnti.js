let currentJobId = null;
let checkInterval = null;
let availableModels = [];
let jobHistory = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
async function loadModels() {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...', 'processing');
        const response = await fetch('/api/models');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π');
        }
        
        availableModels = await response.json();
        updateModelSelect();
        showStatus('‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        
    } catch (error) {
        console.error('Error loading models:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: ' + error.message, 'error');
    }
}

function updateModelSelect() {
    const select = document.getElementById('modelSelect');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...</option>';
    
    availableModels.forEach(model => {
        const option = document.createElement('option');
        option.value = model.model_id;
        option.textContent = model.model_name || model.model_id;
        option.dataset.dimension = model.dimension;
        select.appendChild(option);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
async function loadClusteringHistory() {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...', 'processing');
        const response = await fetch('/api/clusterization/history');
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        
        const history = await response.json();
        displayClusteringHistory(history);
        showStatus('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
        
    } catch (error) {
        console.error('Error loading clustering history:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ' + error.message, 'error');
    }
}

function displayClusteringHistory(history) {
    const container = document.getElementById('clusteringHistory');
    if (!history || history.length === 0) {
        container.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</p>';
        return;
    }

    container.innerHTML = history.map(job => `
        <div class="job-item">
            <div class="job-header">
                <strong>üìä ${job.job_id?.substring(0, 8)}...</strong>
                <span class="job-status ${job.status}">${getStatusIcon(job.status)} ${job.status}</span>
            </div>
            <div class="job-details">
                <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${job.model_id || 'N/A'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(job.created_at).toLocaleString()}</p>
                ${job.corpus_path ? `<p><strong>–ö–æ—Ä–ø—É—Å:</strong> ${job.corpus_path}</p>` : ''}
            </div>
            <button class="btn btn-small" onclick="useClusteringJob('${job.job_id}', '${job.model_id}')">
                ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            </button>
        </div>
    `).join('');
}

function useClusteringJob(jobId, modelId) {
    document.getElementById('clusteringJobId').value = jobId;
    if (modelId) {
        document.getElementById('modelSelect').value = modelId;
    }
    showStatus(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: ${jobId}`, 'success');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function startGrntiClassification() {
    const modelId = document.getElementById('modelSelect').value;
    const clusteringJobId = document.getElementById('clusteringJobId').value;
    const ttlHours = document.getElementById('ttlHours').value;
    const files = document.getElementById('fileInput').files;

    if (!modelId || !clusteringJobId || files.length === 0) {
        showStatus('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }

    try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('startBtn').disabled = true;
        showStatus('üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ì–†–ù–¢–ò...', 'processing');

        const formData = new FormData();
        Array.from(files).forEach(file => formData.append('files', file));

        const response = await fetch('/api/classification/grnti', {
            method: 'POST',
            headers: {
                'x-model-id': modelId,
                'x-clustering-job-id': clusteringJobId,
                'x-ttl-hours': ttlHours
            },
            body: formData
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const result = await response.json();
        currentJobId = result.job_id;
        
        showStatus(`‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. Job ID: ${currentJobId}`, 'success');
        startStatusChecking();
        
    } catch (error) {
        console.error('Classification error:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        document.getElementById('startBtn').disabled = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
function startStatusChecking() {
    if (checkInterval) clearInterval(checkInterval);
    
    checkInterval = setInterval(async () => {
        try {
            const response = await fetch(`/api/jobs/${currentJobId}`);
            if (!response.ok) throw new Error('Status check failed');
            
            const status = await response.json();
            
            if (status.status === 'processing') {
                updateProgress(status);
            } else if (status.status === 'completed') {
                clearInterval(checkInterval);
                await fetchResults(status.result_url);
            } else if (status.status === 'error') {
                clearInterval(checkInterval);
                showStatus('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'error');
            }
        } catch (error) {
            console.error('Status check error:', error);
        }
    }, 2000);
}

function updateProgress(status) {
    const progress = status.progress || 0;
    document.getElementById('progressFill').style.width = progress + '%';
    
    let details = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`;
    if (status.details) {
        details += ` | –§–∞–π–ª–æ–≤: ${status.details.files_processed || 0}`;
        details += ` | –î–∞–Ω–Ω—ã—Ö: ${formatBytes(status.details.bytes_processed || 0)}`;
    }
    document.getElementById('progressDetails').textContent = details;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function fetchResults(resultUrl) {
    try {
                const response = await fetch("/api/result", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "x-result-url": resultUrl
                },
            });
        if (!response.ok) throw new Error('Failed to fetch results');
        
        const results = await response.json();
        displayResults(results);
        showStatus('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('Error fetching results:', error);
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + error.message, 'error');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

function displayResults(results) {
    if (!results.classification_results) {
        showStatus('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'error');
        return;
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const summary = results.classification_results.summary;
    document.getElementById('summaryStats').innerHTML = `
        <div class="stat-item">
            <div class="stat-value">${summary.agreement_with_expert * 100}%</div>
            <div class="stat-label">–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${summary.accuracy_top_3 * 100}%</div>
            <div class="stat-label">–¢–æ—á–Ω–æ—Å—Ç—å (—Ç–æ–ø-3)</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${summary.total_files}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</div>
        </div>
    `;

    // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const tbody = document.getElementById('resultsBody');
    tbody.innerHTML = '';
    
    results.files.forEach(file => {
        const isCorrect = file.expert_grnti_code === file.predicted_grnti_code;
        const rowClass = isCorrect ? 'correct' : 'incorrect';
        
        const top5Html = file.top_5_predictions.map(pred => 
            `<div>${pred[0]} (${(pred[1] * 100).toFixed(1)}%)</div>`
        ).join('');
        
        tbody.innerHTML += `
            <tr class="${rowClass}">
                <td>${file.file}</td>
                <td>${file.expert_grnti_code} - ${file.expert_grnti_name}</td>
                <td>${file.predicted_grnti_code} - ${file.predicted_grnti_name}</td>
                <td>${(file.similarity * 100).toFixed(1)}%</td>
                <td>${top5Html}</td>
                <td>${isCorrect ? '‚úÖ' : '‚ùå'}</td>
            </tr>
        `;
    });

    document.getElementById('results').style.display = 'block';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function selectFolder() {
    document.getElementById('fileInput').click();
}

document.getElementById('fileInput').addEventListener('change', function(e) {
    const files = e.target.files;
    document.getElementById('selectedFolder').textContent = 
        `üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`;
    document.getElementById('startBtn').disabled = files.length === 0;
});

function showStatus(message, type) {
    const container = document.getElementById('status');
    container.innerHTML = `<div class="status status-${type}">${message}</div>`;
}

function getStatusIcon(status) {
    const icons = {
        'processing': 'üîÑ',
        'completed': '‚úÖ',
        'error': '‚ùå'
    };
    return icons[status] || 'üìã';
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
async function loadJobHistory(type = 'all') {
    try {
        const url = type === 'all' ? '/api/jobs/history' : `/api/jobs/history?type=${type}`;
        const response = await fetch(url);
        
        if (response.ok) {
            jobHistory = await response.json();
            displayJobHistory();
        }
    } catch (error) {
        console.error('Error loading job history:', error);
    }
}

function displayJobHistory() {
    const container = document.getElementById('jobHistory');
    if (!jobHistory.length) {
        container.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π</p>';
        return;
    }

    container.innerHTML = jobHistory.map(job => `
        <div class="job-item">
            <div class="job-header">
                <strong>${job.type === 'grnti_classification' ? 'üè∑Ô∏è' : 'üìä'} ${job.job_id?.substring(0, 8)}...</strong>
                <span class="job-status ${job.status}">${getStatusIcon(job.status)} ${job.status}</span>
            </div>
            <div class="job-details">
                <p><strong>–¢–∏–ø:</strong> ${job.type}</p>
                <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${job.model_id || 'N/A'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(job.created_at).toLocaleString()}</p>
            </div>
        </div>
    `).join('');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadModels();
    loadClusteringHistory();
    loadJobHistory('all');
});