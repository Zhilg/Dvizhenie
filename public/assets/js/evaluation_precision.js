let classificationHistory = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function loadClassificationHistory(type = 'all') {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...', 'processing');
        
        const response = await fetch('/api/classification/history');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
        
        const data = await response.json();
        classificationHistory = Array.isArray(data) ? data : [];
        
        displayClassificationHistory(type);
        showStatus('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
        
    } catch (error) {
        console.error('Error loading classification history:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ' + error.message, 'error');
        classificationHistory = [];
        displayClassificationHistory(type);
    }
}

function displayClassificationHistory(type) {
    const container = document.getElementById('classificationHistory');
    
    const filteredHistory = type === 'all' 
        ? classificationHistory 
        : classificationHistory.filter(job => job.type === type || job.type === `${type}_classification`);
    
    if (filteredHistory.length === 0) {
        container.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</p>';
        return;
    }

    container.innerHTML = filteredHistory.map(job => `
        <div class="job-item">
            <div class="job-header">
                <strong>${job.type.includes('grnti') ? 'üè∑Ô∏è' : 'üìä'} ${job.job_id?.substring(0, 8)}...</strong>
                <span class="job-status ${job.status}">${getStatusIcon(job.status)} ${job.status}</span>
            </div>
            <div class="job-details">
                <p><strong>–¢–∏–ø:</strong> ${job.type.includes('grnti') ? '–ì–†–ù–¢–ò' : '–ö–ª–∞—Å—Ç–µ—Ä–Ω–∞—è'}</p>
                <p><strong>–ú–æ–¥–µ–ª—å:</strong> ${job.model_id || 'N/A'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(job.created_at).toLocaleString()}</p>
                ${job.corpus_path ? `<p><strong>–ö–æ—Ä–ø—É—Å:</strong> ${job.corpus_path}</p>` : ''}
            </div>
            <button class="btn btn-small btn-primary" onclick="useClassificationJob('${job.job_id}', '${job.type.includes('grnti') ? 'grnti' : 'cluster'}')">
                ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            </button>
        </div>
    `).join('');
}

function useClassificationJob(jobId, jobType) {
    document.getElementById('classificationJobId').value = jobId;
    document.getElementById('evaluationType').value = jobType;
    showStatus(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${jobId}`, 'success');
}

// –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
async function evaluatePrecision() {
    const jobId = document.getElementById('classificationJobId').value;
    const evalType = document.getElementById('evaluationType').value;
    const threshold = parseFloat(document.getElementById('precisionThreshold').value);
    
    if (!jobId || !evalType) {
        showStatus('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    try {
        document.getElementById('evaluateBtn').disabled = true;
        showStatus('üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏...', 'processing');
        
        const response = await fetch('/api/evaluation/precision', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-classification-job-id': jobId,
                'x-evaluation-type': evalType
            }
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        const results = await response.json();
        displayResults(results);
        showStatus('‚úÖ –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');
        
    } catch (error) {
        console.error('Evaluation error:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: ' + error.message, 'error');
    } finally {
        document.getElementById('evaluateBtn').disabled = false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(results) {
    // –û–±–Ω–æ–≤–ª—è–µ–º summary cards
    document.getElementById('precisionValue').textContent = results.metrics.precision.toFixed(4);
    document.getElementById('totalFiles').textContent = results.metrics.total_files;
    document.getElementById('matchesFound').textContent = results.summary.files_with_matches;
    document.getElementById('matchesPercent').textContent = 
        Math.round((results.summary.files_with_matches / results.metrics.total_files) * 100) + '%';
    document.getElementById('thresholdValue').textContent = results.threshold;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('totalTp').textContent = results.metrics.total_tp;
    document.getElementById('totalFp').textContent = results.metrics.total_fp;
    document.getElementById('totalFn').textContent = results.metrics.total_fn;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const precisionCard = document.getElementById('precisionCard');
    const precisionStatus = document.getElementById('precisionStatus');
    const requirementMet = document.getElementById('requirementMet');
    
    if (results.threshold_met) {
        precisionCard.classList.add('success');
        precisionCard.classList.remove('warning', 'error');
        precisionStatus.textContent = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ';
        requirementMet.textContent = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ';
        requirementMet.className = 'status-success';
    } else {
        precisionCard.classList.add('error');
        precisionCard.classList.remove('success', 'warning');
        precisionStatus.textContent = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå';
        requirementMet.textContent = '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå';
        requirementMet.className = 'status-error';
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const tbody = document.getElementById('resultsBody');
    tbody.innerHTML = '';
    
    results.file_level_metrics.forEach(metric => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${metric.file}</td>
            <td>${metric.expert_label}</td>
            <td>${metric.match_found ? '‚úÖ' : '‚ùå'}</td>
            <td>${metric.tp}</td>
            <td>${metric.fp}</td>
            <td>${metric.fn}</td>
            <td>${metric.precision.toFixed(4)}</td>
            <td><span class="status-badge ${metric.match_found ? 'status-success' : 'status-error'}">
                ${metric.match_found ? '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ' : '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'}
            </span></td>
        `;
        tbody.appendChild(row);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('results').style.display = 'block';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showStatus(message, type) {
    const container = document.getElementById('status');
    container.innerHTML = `<div class="status status-${type}">${message}</div>`;
}

function getStatusIcon(status) {
    const icons = {
        'processing': 'üîÑ',
        'completed': '‚úÖ',
        'error': '‚ùå'
    };
    return icons[status] || 'üìã';
}

function downloadReport() {
    alert('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
}

function visualizeResults() {
    alert('–§—É–Ω–∫—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadClassificationHistory('all');
});