let currentJobId = null;
let checkInterval = null;
let availableModels = [];
let baseTrainingTime = null;
let fineTuningStartTime = null;
let timerInterval = null;
let startTime = null;
let trainingTime = null;

function startTimer() {
    startTime = new Date();
    timerInterval = setInterval(updateTimer, 1000);
}

function stopTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è
        const endTime = new Date();
        trainingTime = (endTime - startTime) / 1000;
        return trainingTime; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è
    }
    return null;
}

function resetTimer() {
    stopTimer();
    totalTrainingTime = null;
    document.getElementById('timerDisplay').textContent = '00:00:00';
}

function updateTimer() {
    const currentTime = new Date();
    const elapsedTime = new Date(currentTime - startTime);
    
    const hours = elapsedTime.getUTCHours().toString().padStart(2, '0');
    const minutes = elapsedTime.getUTCMinutes().toString().padStart(2, '0');
    const seconds = elapsedTime.getUTCSeconds().toString().padStart(2, '0');
    
    document.getElementById('timerDisplay').textContent = `${hours}:${minutes}:${seconds}`;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async function loadModels() {
    try {
        showStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...', 'processing');
        const response = await fetch('/api/models');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π');
        }
        
        availableModels = await response.json();
        updateModelSelect();
        showStatus('‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        
    } catch (error) {
        console.error('Error loading models:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: ' + error.message, 'error');
    }
}

function updateModelSelect() {
    const select = document.getElementById('baseModelSelect');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...</option>';
    
    availableModels.forEach(model => {
        const option = document.createElement('option');
        option.value = model.model_id;
        option.textContent = model.model_name || model.model_id;
        option.dataset.dimension = model.dimension;
        select.appendChild(option);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    select.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        if (selectedOption.value) {
            document.getElementById('modelInfo').style.display = 'block';
            document.getElementById('modelDetails').innerHTML = `
                <p><strong>ID –º–æ–¥–µ–ª–∏:</strong> ${selectedOption.value}</p>
                <p><strong>–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:</strong> ${selectedOption.dataset.dimension}</p>
            `;
        } else {
            document.getElementById('modelInfo').style.display = 'none';
        }
    });
}

// –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
function selectTrainingFolder() {
    document.getElementById('trainingDataInput').click();
}

document.getElementById('trainingDataInput').addEventListener('change', function(e) {
    const files = e.target.files;
    if (files.length === 0) return;
    
    document.getElementById('selectedTrainingFolder').textContent = 
        `üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    analyzeSelectedFiles(files);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –∏ —Ñ–∞–π–ª—ã
    const modelSelected = document.getElementById('baseModelSelect').value !== '';
    document.getElementById('startBtn').disabled = !modelSelected || files.length === 0;
});

// –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function analyzeSelectedFiles(files) {
    let totalSize = 0;
    let extensions = {};
    let sizeStats = {
        count: files.length,
        totalSize: 0,
        avgSize: 0,
        minSize: Infinity,
        maxSize: 0
    };
    
    Array.from(files).forEach(file => {
        totalSize += file.size;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        sizeStats.totalSize += file.size;
        if (file.size < sizeStats.minSize) sizeStats.minSize = file.size;
        if (file.size > sizeStats.maxSize) sizeStats.maxSize = file.size;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        const ext = file.name.split('.').pop().toLowerCase();
        extensions[ext] = (extensions[ext] || 0) + 1;
    });
    
    sizeStats.avgSize = sizeStats.totalSize / sizeStats.count;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formatBytes = (bytes) => {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('fileStats').style.display = 'block';
    document.getElementById('fileStatsContent').innerHTML = `
        <p>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: <strong>${formatBytes(sizeStats.totalSize)}</strong></p>
        <p>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: –æ—Ç <strong>${formatBytes(sizeStats.minSize)}</strong> –¥–æ <strong>${formatBytes(sizeStats.maxSize)}</strong></p>
        <p>–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: <strong>${formatBytes(sizeStats.avgSize)}</strong></p>
        <p>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${Object.entries(extensions).map(([ext, count]) => 
            `<span class="file-ext">${ext} (${count})</span>`).join(', ')}
        </p>
    `;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è
async function startFineTuning() {
    resetTimer();
    const baseModelId = document.getElementById('baseModelSelect').value;
    const newModelName = document.getElementById('newModelName').value || `fine_tuned_${Date.now()}`;
    const files = document.getElementById('trainingDataInput').files;
    
    if (!baseModelId || files.length === 0) {
        showStatus('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è', 'error');
        return;
    }
    
    try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('startBtn').disabled = true;
        showStatus('üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...', 'processing');
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è
        fineTuningStartTime = Date.now();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        const baseModelInfo = availableModels.find(m => m.model_id === baseModelId);
        if (baseModelInfo && baseModelInfo.training_time) {
            baseTrainingTime = baseModelInfo.training_time;
        }
        
        const formData = new FormData();
        Array.from(files).forEach(file => formData.append('files', file));
        formData.append('new_model_name', newModelName);

        const response = await fetch('/api/fine-tuning/start', {
            method: 'POST',
            headers: {
                'X-Base-Model-ID': baseModelId
            },
            body: formData
        });
        startTimer();
        if (!response.ok) {
            const error = await response.text();
            throw new Error(error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        const result = await response.json();
        currentJobId = result.job_id;
        
        showStatus(`‚úÖ –î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. Job ID: ${currentJobId}`, 'success');
        startStatusChecking();
        
    } catch (error) {
        console.error('Fine-tuning error:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
        document.getElementById('loading').style.display = 'none';
        document.getElementById('startBtn').disabled = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è
function startStatusChecking() {
    if (checkInterval) clearInterval(checkInterval);
    
    checkInterval = setInterval(async () => {
        try {
            const response = await fetch(`/api/jobs/${currentJobId}`);
            if (!response.ok) throw new Error('Status check failed');
            
            const status = await response.json();
            
            if (status.status === 'processing') {
                updateProgress(status);
            } else if (status.status === 'completed') {
                clearInterval(checkInterval);
                await fetchResults(status.result_url);
            } else if (status.status === 'error') {
                clearInterval(checkInterval);
                showStatus('‚ùå –û—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è', 'error');
                document.getElementById('loading').style.display = 'none';
            }
        } catch (error) {
            console.error('Status check error:', error);
        }
    }, 3000);
}

function updateProgress(status) {
    const progress = status.progress || 0;
    document.getElementById('progressFill').style.width = progress + '%';
    
    let details = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`;
    if (status.details) {
        details += ` | –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${status.details.files_processed || 0}/${status.details.total_files || 0}`;
        if (status.details.current_epoch) {
            details += ` | –≠–ø–æ—Ö–∞: ${status.details.current_epoch || 0}/${status.details.total_epochs || 0}`;
        }
    }
    document.getElementById('progressDetails').textContent = details;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (fineTuningStartTime && baseTrainingTime) {
        const elapsedTime = (Date.now() - fineTuningStartTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const timeComparison = baseTrainingTime / elapsedTime;
        
        let comparisonText = `–í—Ä–µ–º—è –¥–æ–æ–±—É—á–µ–Ω–∏—è: ${elapsedTime.toFixed(1)}—Å, `;
        comparisonText += `–ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ: ${baseTrainingTime.toFixed(1)}—Å, `;
        comparisonText += `–£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${timeComparison.toFixed(1)}x`;
        
        if (timeComparison > 10) {
            comparisonText += ' ‚úÖ (–î–æ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω—ã–º)';
        } else {
            comparisonText += ' ‚ö†Ô∏è (–î–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞–Ω–æ —É—Å–ø–µ—à–Ω—ã–º)';
        }
        
        document.getElementById('timeComparison').textContent = comparisonText;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–æ–±—É—á–µ–Ω–∏—è
async function fetchResults(resultUrl) {
    try {
        const response = await fetch("/api/result", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "x-result-url": resultUrl
            },
        });
        trainingTime = stopTimer();
        if (!response.ok) throw new Error('Failed to fetch results');
        
        const results = await response.json();
        displayResults(results);
        showStatus('–î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('Error fetching results:', error);
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + error.message, 'error');
    } finally {
        document.getElementById('loading').style.display = 'none';
        loadFineTuningHistory();
    }
}

function displayResults(results) {
    document.getElementById('results').style.display = 'block';
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('summaryStats').innerHTML = `
        <div class="stat-item">
            <div class="stat-value">${results.new_model_id ? '‚úÖ' : '‚ùå'}</div>
            <div class="stat-label">–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${results.files_processed || 0}</div>
            <div class="stat-label">–§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${results.training_time ? results.training_time.toFixed(1) + ' —Å' : 'N/A'}</div>
            <div class="stat-label">–í—Ä–µ–º—è –¥–æ–æ–±—É—á–µ–Ω–∏—è</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">${results.performance_improvement ? (results.performance_improvement * 100).toFixed(1) + '%' : 'N/A'}</div>
            <div class="stat-label">–£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏</div>
        </div>
        ${results.clustering_result ? `
        <div class="stat-item">
            <div class="stat-value">${results.clustering_result.total_clusters || 0}</div>
            <div class="stat-label">–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</div>
        </div>
        <div class="stat-item">
            <div class="stat-value">+${results.clustering_result.new_clusters || 0}</div>
            <div class="stat-label">–ù–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</div>
        </div>
        ` : ''}
    `;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (results.performance_comparison) {
        const comp = results.performance_comparison;
        document.getElementById('performanceComparison').innerHTML = `
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                <div style="padding: 15px; background: #f0f7ff; border-radius: 8px;">
                    <h4>–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å</h4>
                    <p>–¢–æ—á–Ω–æ—Å—Ç—å: ${(comp.base_accuracy * 100).toFixed(1)}%</p>
                    <p>–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ${comp.base_training_time.toFixed(1)}—Å</p>
                </div>
                <div style="padding: 15px; background: #e6ffe6; border-radius: 8px;">
                    <h4>–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å</h4>
                    <p>–¢–æ—á–Ω–æ—Å—Ç—å: ${(comp.fine_tuned_accuracy * 100).toFixed(1)}%</p>
                    <p>–í—Ä–µ–º—è –¥–æ–æ–±—É—á–µ–Ω–∏—è: ${comp.fine_tuning_time.toFixed(1)}—Å</p>
                    <p>–£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${(comp.base_training_time / comp.fine_tuning_time).toFixed(1)}x</p>
                </div>
            </div>
        `;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (results.clustering_result) {
        displayClusteringResults(results.clustering_result);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
function displayClusteringResults(clusterData) {
    console.log(clusterData);
    const clusteringSection = document.createElement('div');
    clusteringSection.className = 'section';
    
    let clustersHtml = '';
    
    // –ù–æ–≤—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    if (clusterData.cluster_changes?.new_clusters_details?.length > 0) {
        clustersHtml += `
            <div class="cluster-category">
                <h4 style="color: #28a745;">üÜï –ù–æ–≤—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã (${clusterData.new_clusters})</h4>
                ${clusterData.cluster_changes.new_clusters_details.map(cluster => `
                    <div class="cluster-card new">
                        <h5>${cluster.cluster_id}</h5>
                        <p><strong>–†–∞–∑–º–µ—Ä:</strong> ${cluster.size} —Ñ–∞–π–ª–æ–≤</p>
                        <p><strong>–¢–µ–º—ã:</strong> ${cluster.main_topics.join(', ')}</p>
                        <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${(cluster.avg_confidence * 100).toFixed(1)}%</p>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    if (clusterData.cluster_changes?.modified_clusters_details?.length > 0) {
        clustersHtml += `
            <div class="cluster-category">
                <h4 style="color: #ffc107;">üîÑ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã (${clusterData.modified_clusters})</h4>
                ${clusterData.cluster_changes.modified_clusters_details.map(cluster => `
                    <div class="cluster-card modified">
                        <h5>${cluster.cluster_id}</h5>
                        <p><strong>–†–∞–∑–º–µ—Ä:</strong> ${cluster.old_size} ‚Üí ${cluster.new_size} 
                           <span style="color: ${cluster.size_change.startsWith('+') ? '#28a745' : '#dc3545'}">
                           ${cluster.size_change}
                           </span>
                        </p>
                        <p><strong>–ù–æ–≤—ã–µ —Ç–µ–º—ã:</strong> ${cluster.new_topics.join(', ') || '–Ω–µ—Ç'}</p>
                        <p><strong>–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:</strong> ${cluster.removed_topics.join(', ') || '–Ω–µ—Ç'}</p>
                        <p><strong>–£–ª—É—á—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:</strong> +${(cluster.confidence_improvement * 100).toFixed(1)}%</p>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    // –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    if (clusterData.cluster_changes?.unchanged_clusters?.length > 0) {
        clustersHtml += `
            <div class="cluster-category">
                <h4 style="color: #6c757d;">‚úÖ –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã (${clusterData.unchanged_clusters})</h4>
                ${clusterData.cluster_changes.unchanged_clusters.map(cluster => `
                    <div class="cluster-card unchanged">
                        <h5>${cluster.cluster_id}</h5>
                        <p><strong>–†–∞–∑–º–µ—Ä:</strong> ${cluster.size} —Ñ–∞–π–ª–æ–≤</p>
                        <p><strong>–¢–µ–º—ã:</strong> ${cluster.main_topics.join(', ')}</p>
                        <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${(cluster.avg_confidence * 100).toFixed(1)}%</p>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (clusterData.summary) {
        const summary = clusterData.summary;
        clustersHtml += `
            <div class="cluster-summary">
                <h4>üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</h4>
                <div class="summary-grid">
                    <div class="summary-item">
                        <span class="summary-value">${summary.total_documents}</span>
                        <span class="summary-label">–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-value" style="color: #28a745;">${summary.documents_in_new_clusters}</span>
                        <span class="summary-label">–í –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-value" style="color: #ffc107;">${summary.documents_in_modified_clusters}</span>
                        <span class="summary-label">–í –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-value" style="color: #6c757d;">${summary.documents_in_unchanged_clusters}</span>
                        <span class="summary-label">–í –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-value" style="color: #17a2b8;">${summary.overall_confidence_change}</span>
                        <span class="summary-label">–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-value" style="color: #6f42c1;">${summary.cluster_quality_improvement}</span>
                        <span class="summary-label">–ö–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</span>
                    </div>
                </div>
            </div>
        `;
    }
    
    clusteringSection.innerHTML = `
        <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è</h3>
        <div class="clustering-results">
            <div class="cluster-overview">
                <p><strong>–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:</strong> ${clusterData.total_clusters || 'N/A'}</p>
                <p><strong>–ù–æ–≤—ã—Ö:</strong> <span style="color: #28a745;">${clusterData.new_clusters || 'N/A'}</span></p>
                <p><strong>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö:</strong> <span style="color: #ffc107;">${clusterData.modified_clusters || 'N/A'}</span></p>
                <p><strong>–ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö:</strong> <span style="color: #6c757d;">${clusterData.unchanged_clusters || 'N/A'}</span></p>
            </div>
            ${clustersHtml}
        </div>
    `;
    
    document.getElementById('results').appendChild(clusteringSection);
}

function renderClusterTree(node, level = 0) {
    if (!node.id) return '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</p>';
    
    let html = `
        <div class="cluster-node" style="margin-left: ${level * 20}px">
            <div class="cluster-header">
                <strong>${node.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong> 
                <span class="cluster-stats">${node.fileCount || 0} —Ñ–∞–π–ª–æ–≤, ${((node.avgSimilarity || 0) * 100).toFixed(1)}%</span>
            </div>
    `;
    
    if (node.changes && node.changes.status !== 'unchanged') {
        html += `<span class="change-badge ${node.changes.status}">${getChangeBadgeText(node.changes.status)}</span>`;
    }
    
    if (node.children && node.children.length > 0) {
        html += '<div class="cluster-children">';
        node.children.forEach(child => {
            html += renderClusterTree(child, level + 1);
        });
        html += '</div>';
    }
    
    html += '</div>';
    return html;
}

function getChangeBadgeText(status) {
    const statusText = {
        'new': '–ù–û–í–´–ô',
        'modified': '–ò–ó–ú–ï–ù–ï–ù',
        'removed': '–£–î–ê–õ–ï–ù',
        'moved': '–ü–ï–†–ï–ú–ï–©–ï–ù'
    };
    return statusText[status] || status;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è
async function loadFineTuningHistory() {
    try {
        const response = await fetch('/api/fine-tuning/history');
        
        if (response.ok) {
            const history = await response.json();
            displayFineTuningHistory(history);
        }
    } catch (error) {
        console.error('Error loading fine-tuning history:', error);
    }
}

function displayFineTuningHistory(history) {
    const container = document.getElementById('fineTuningHistory');
    if (!history || history.length === 0) {
        container.innerHTML = '<p>üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è</p>';
        return;
    }
    
    container.innerHTML = history.map(job => `
        <div class="job-item">
            <div class="job-header">
                <strong>üîß ${job.job_id?.substring(0, 8)}...</strong>
                <span class="job-status status-${job.status}">${getStatusIcon(job.status)} ${job.status}</span>
            </div>
            <div class="job-details">
                <p><strong>–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å:</strong> ${job.base_model_id || 'N/A'}</p>
                <p><strong>–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å:</strong> ${job.new_model_id || 'N/A'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(job.created_at).toLocaleString()}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> ${trainingTime}—Å</p>
            </div>
        </div>
    `).join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showStatus(message, type) {
    const container = document.getElementById('status');
    container.innerHTML = `<div class="status-${type}">${message}</div>`;
    container.className = `status-container status-${type}`;
}

function getStatusIcon(status) {
    const icons = {
        'processing': 'üîÑ',
        'completed': '‚úÖ',
        'error': '‚ùå'
    };
    return icons[status] || 'üìã';
}

function downloadResults() {
    alert('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º');
}

function testNewModel() {
    alert('–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º');
}

function deployNewModel() {
    alert('–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    loadModels();
    loadFineTuningHistory();
});